{"ast":null,"code":"var _jsxFileName = \"D:\\\\MY PROJECTS\\\\BrainTeaser_Quiz\\\\brainteaser\\\\client\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Quiz = () => {\n  _s();\n  const [questions, setQuestions] = useState([{\n    id: 1,\n    question: \"If you have a bowl with 6 apples and you take away 3, how many do you have left?\",\n    options: [\"a) 3\", \"b) 6\", \"c) 2\", \"d) 4\"],\n    answer: \"a) 3\"\n  }, {\n    id: 2,\n    question: \"A farmer has 15 cows and all but 8 die. How many cows are left?\",\n    options: [\"a) 7\", \"b) 8\", \"c) 15\", \"d) 23\"],\n    answer: \"a) 7\"\n  }, {\n    id: 3,\n    question: \"What word becomes shorter when you add two letters to it?\",\n    options: [\"a) Short\", \"b) Longer\", \"c) Shorter\", \"d) None of the above\"],\n    answer: \"a) Short\"\n  }]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState(\"01:00\");\n  const [sessionActive, setSessionActive] = useState(false);\n  const [quizState, setQuizState] = useState(Array(questions.length).fill(null));\n  const [score, setScore] = useState(0);\n  const [questionStatus, setQuestionStatus] = useState(Array(questions.length).fill(\"notAttempted\"));\n  useEffect(() => {\n    const sessionTimer = setTimeout(() => {\n      setSessionActive(false);\n      alert(\"Session ended. Please start again to attempt the quiz.\");\n    }, 10 * 60 * 1000); // 10 minutes session\n    return () => clearTimeout(sessionTimer);\n  }, []);\n  useEffect(() => {\n    if (sessionActive) {\n      const timer = setInterval(() => {\n        setTimeRemaining(prev => {\n          const [min, sec] = prev.split(\":\").map(Number);\n          if (min === 0 && sec === 0) {\n            handleNextQuestion(true);\n            return \"01:00\";\n          } else {\n            if (sec === 0) {\n              return `${min - 1 < 10 ? \"0\" : \"\"}${min - 1}:59`;\n            } else {\n              return `${min < 10 ? \"0\" : \"\"}${min}:${sec - 1 < 10 ? \"0\" : \"\"}${sec - 1}`;\n            }\n          }\n        });\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [sessionActive]);\n  const handleStartQuiz = () => {\n    setSessionActive(true);\n  };\n  const handleOptionChange = e => {\n    setSelectedOption(e.target.value);\n  };\n  const handleNextQuestion = (missed = false) => {\n    const correctAnswer = questions[currentQuestion].answer;\n    const isCorrect = selectedOption === correctAnswer;\n    const marks = isCorrect ? 1 : 0;\n    const updatedQuizState = [...quizState];\n    updatedQuizState[currentQuestion] = {\n      question: questions[currentQuestion].question,\n      selectedOption,\n      correctAnswer,\n      marks\n    };\n    setQuizState(updatedQuizState);\n    setScore(prevScore => prevScore + marks);\n    setSelectedOption(\"\");\n    const updatedStatus = [...questionStatus];\n    updatedStatus[currentQuestion] = selectedOption !== \"\" ? \"attempted\" : missed ? \"missed\" : \"notAttempted\";\n    setQuestionStatus(updatedStatus);\n    if (currentQuestion === questions.length - 1) {\n      // Last question, handle separately\n      handleLastQuestion();\n    } else {\n      setCurrentQuestion(prevQuestion => prevQuestion + 1);\n      setTimeRemaining(\"01:00\"); // Reset timeRemaining to 01:00\n    }\n  };\n  const handleLastQuestion = () => {\n    const correctAnswer = questions[currentQuestion].answer;\n    const isCorrect = selectedOption === correctAnswer;\n    const marks = isCorrect ? 1 : 0;\n    const updatedQuizState = [...quizState];\n    updatedQuizState[currentQuestion] = {\n      question: questions[currentQuestion].question,\n      selectedOption,\n      correctAnswer,\n      marks\n    };\n    setQuizState(updatedQuizState);\n    setScore(prevScore => prevScore + marks);\n    setSelectedOption(\"\");\n    const updatedStatus = [...questionStatus];\n    updatedStatus[currentQuestion] = selectedOption !== \"\" ? \"attempted\" : \"notAttempted\";\n    setQuestionStatus(updatedStatus);\n    handleSubmit();\n  };\n  const handleSubmit = () => {\n    const updatedQuizState = [...quizState];\n    updatedQuizState[currentQuestion] = {\n      question: questions[currentQuestion].question,\n      selectedOption,\n      correctAnswer: questions[currentQuestion].answer,\n      marks: selectedOption === questions[currentQuestion].answer ? 1 : 0\n    };\n    setQuizState(updatedQuizState);\n    const updatedStatus = [...questionStatus];\n    updatedStatus[currentQuestion] = selectedOption !== \"\" ? \"attempted\" : \"notAttempted\";\n    setQuestionStatus(updatedStatus);\n\n    // Handle last question separately\n    if (currentQuestion === questions.length - 1) {\n      const lastQuestionMarks = selectedOption === questions[currentQuestion].answer ? 1 : 0;\n      setScore(score + lastQuestionMarks);\n      setSessionActive(false);\n      console.log(\"Quiz State:\", updatedQuizState);\n      console.log(\"Total Score:\", score + lastQuestionMarks);\n      alert(\"Quiz submitted successfully. Session ended.\");\n    }\n  };\n  const handleQuestionClick = index => {\n    if (selectedOption === \"\") {\n      const confirmMove = window.confirm(\"You have not selected any option. Are you sure you want to move to the next question? You won't be allowed to go back to this question.\");\n      if (!confirmMove) {\n        return;\n      }\n    }\n    setCurrentQuestion(index);\n    setSelectedOption(\"\");\n    setTimeRemaining(\"01:00\"); // Reset timeRemaining to 01:00\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [!sessionActive && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary mt-3\",\n      onClick: handleStartQuiz,\n      children: \"Start Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this), sessionActive && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Time Remaining: \", timeRemaining]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: questions[currentQuestion].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: questions[currentQuestion].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-check\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-check-input\",\n              type: \"radio\",\n              name: \"option\",\n              id: `option${index}`,\n              value: option,\n              onChange: handleOptionChange,\n              checked: selectedOption === option\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-check-label\",\n              htmlFor: `option${index}`,\n              children: option\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3 me-2\",\n        onClick: handleNextQuestion,\n        disabled: selectedOption === \"\" || currentQuestion === questions.length - 1,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this), currentQuestion === questions.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3 ms-2\",\n        onClick: handleSubmit,\n        disabled: selectedOption === \"\",\n        children: \"Submit Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Question Status:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"list-group\",\n          children: questions.map((_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `list-group-item list-group-item-action ${questionStatus[index] === \"attempted\" ? \"list-group-item-success\" : questionStatus[index] === \"missed\" ? \"list-group-item-warning\" : \"\"}`,\n            onClick: () => handleQuestionClick(index),\n            children: [\"Question \", index + 1, \" - \", questionStatus[index]]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s(Quiz, \"OY65J2ZahPwZCtAFEFUof9qr4nQ=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Quiz","_s","questions","setQuestions","id","question","options","answer","currentQuestion","setCurrentQuestion","selectedOption","setSelectedOption","timeRemaining","setTimeRemaining","sessionActive","setSessionActive","quizState","setQuizState","Array","length","fill","score","setScore","questionStatus","setQuestionStatus","sessionTimer","setTimeout","alert","clearTimeout","timer","setInterval","prev","min","sec","split","map","Number","handleNextQuestion","clearInterval","handleStartQuiz","handleOptionChange","e","target","value","missed","correctAnswer","isCorrect","marks","updatedQuizState","prevScore","updatedStatus","handleLastQuestion","prevQuestion","handleSubmit","lastQuestionMarks","console","log","handleQuestionClick","index","confirmMove","window","confirm","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","option","type","name","onChange","checked","htmlFor","disabled","_","_c","$RefreshReg$"],"sources":["D:/MY PROJECTS/BrainTeaser_Quiz/brainteaser/client/src/components/Quiz.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst Quiz = () => {\r\n  const [questions, setQuestions] = useState([\r\n    {\r\n      id: 1,\r\n      question:\r\n        \"If you have a bowl with 6 apples and you take away 3, how many do you have left?\",\r\n      options: [\"a) 3\", \"b) 6\", \"c) 2\", \"d) 4\"],\r\n      answer: \"a) 3\",\r\n    },\r\n    {\r\n      id: 2,\r\n      question:\r\n        \"A farmer has 15 cows and all but 8 die. How many cows are left?\",\r\n      options: [\"a) 7\", \"b) 8\", \"c) 15\", \"d) 23\"],\r\n      answer: \"a) 7\",\r\n    },\r\n    {\r\n      id: 3,\r\n      question: \"What word becomes shorter when you add two letters to it?\",\r\n      options: [\"a) Short\", \"b) Longer\", \"c) Shorter\", \"d) None of the above\"],\r\n      answer: \"a) Short\",\r\n    },\r\n  ]);\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [selectedOption, setSelectedOption] = useState(\"\");\r\n  const [timeRemaining, setTimeRemaining] = useState(\"01:00\");\r\n  const [sessionActive, setSessionActive] = useState(false);\r\n  const [quizState, setQuizState] = useState(\r\n    Array(questions.length).fill(null)\r\n  );\r\n  const [score, setScore] = useState(0);\r\n  const [questionStatus, setQuestionStatus] = useState(\r\n    Array(questions.length).fill(\"notAttempted\")\r\n  );\r\n\r\n  useEffect(() => {\r\n    const sessionTimer = setTimeout(() => {\r\n      setSessionActive(false);\r\n      alert(\"Session ended. Please start again to attempt the quiz.\");\r\n    }, 10 * 60 * 1000); // 10 minutes session\r\n    return () => clearTimeout(sessionTimer);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (sessionActive) {\r\n      const timer = setInterval(() => {\r\n        setTimeRemaining((prev) => {\r\n          const [min, sec] = prev.split(\":\").map(Number);\r\n          if (min === 0 && sec === 0) {\r\n            handleNextQuestion(true);\r\n            return \"01:00\";\r\n          } else {\r\n            if (sec === 0) {\r\n              return `${min - 1 < 10 ? \"0\" : \"\"}${min - 1}:59`;\r\n            } else {\r\n              return `${min < 10 ? \"0\" : \"\"}${min}:${sec - 1 < 10 ? \"0\" : \"\"}${\r\n                sec - 1\r\n              }`;\r\n            }\r\n          }\r\n        });\r\n      }, 1000);\r\n\r\n      return () => clearInterval(timer);\r\n    }\r\n  }, [sessionActive]);\r\n\r\n  const handleStartQuiz = () => {\r\n    setSessionActive(true);\r\n  };\r\n\r\n  const handleOptionChange = (e) => {\r\n    setSelectedOption(e.target.value);\r\n  };\r\n\r\n  const handleNextQuestion = (missed = false) => {\r\n    const correctAnswer = questions[currentQuestion].answer;\r\n    const isCorrect = selectedOption === correctAnswer;\r\n    const marks = isCorrect ? 1 : 0;\r\n\r\n    const updatedQuizState = [...quizState];\r\n    updatedQuizState[currentQuestion] = {\r\n      question: questions[currentQuestion].question,\r\n      selectedOption,\r\n      correctAnswer,\r\n      marks,\r\n    };\r\n\r\n    setQuizState(updatedQuizState);\r\n\r\n    setScore((prevScore) => prevScore + marks);\r\n\r\n    setSelectedOption(\"\");\r\n\r\n    const updatedStatus = [...questionStatus];\r\n    updatedStatus[currentQuestion] =\r\n      selectedOption !== \"\" ? \"attempted\" : missed ? \"missed\" : \"notAttempted\";\r\n    setQuestionStatus(updatedStatus);\r\n\r\n    if (currentQuestion === questions.length - 1) {\r\n      // Last question, handle separately\r\n      handleLastQuestion();\r\n    } else {\r\n      setCurrentQuestion((prevQuestion) => prevQuestion + 1);\r\n      setTimeRemaining(\"01:00\"); // Reset timeRemaining to 01:00\r\n    }\r\n  };\r\n\r\n  const handleLastQuestion = () => {\r\n    const correctAnswer = questions[currentQuestion].answer;\r\n    const isCorrect = selectedOption === correctAnswer;\r\n    const marks = isCorrect ? 1 : 0;\r\n\r\n    const updatedQuizState = [...quizState];\r\n    updatedQuizState[currentQuestion] = {\r\n      question: questions[currentQuestion].question,\r\n      selectedOption,\r\n      correctAnswer,\r\n      marks,\r\n    };\r\n\r\n    setQuizState(updatedQuizState);\r\n\r\n    setScore((prevScore) => prevScore + marks);\r\n\r\n    setSelectedOption(\"\");\r\n\r\n    const updatedStatus = [...questionStatus];\r\n    updatedStatus[currentQuestion] =\r\n      selectedOption !== \"\" ? \"attempted\" : \"notAttempted\";\r\n    setQuestionStatus(updatedStatus);\r\n\r\n    handleSubmit();\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const updatedQuizState = [...quizState];\r\n    updatedQuizState[currentQuestion] = {\r\n      question: questions[currentQuestion].question,\r\n      selectedOption,\r\n      correctAnswer: questions[currentQuestion].answer,\r\n      marks: selectedOption === questions[currentQuestion].answer ? 1 : 0,\r\n    };\r\n\r\n    setQuizState(updatedQuizState);\r\n\r\n    const updatedStatus = [...questionStatus];\r\n    updatedStatus[currentQuestion] =\r\n      selectedOption !== \"\" ? \"attempted\" : \"notAttempted\";\r\n    setQuestionStatus(updatedStatus);\r\n\r\n    // Handle last question separately\r\n    if (currentQuestion === questions.length - 1) {\r\n      const lastQuestionMarks =\r\n        selectedOption === questions[currentQuestion].answer ? 1 : 0;\r\n      setScore(score + lastQuestionMarks);\r\n\r\n      setSessionActive(false);\r\n      console.log(\"Quiz State:\", updatedQuizState);\r\n      console.log(\"Total Score:\", score + lastQuestionMarks);\r\n      alert(\"Quiz submitted successfully. Session ended.\");\r\n    }\r\n  };\r\n\r\n  const handleQuestionClick = (index) => {\r\n    if (selectedOption === \"\") {\r\n      const confirmMove = window.confirm(\r\n        \"You have not selected any option. Are you sure you want to move to the next question? You won't be allowed to go back to this question.\"\r\n      );\r\n      if (!confirmMove) {\r\n        return;\r\n      }\r\n    }\r\n    setCurrentQuestion(index);\r\n    setSelectedOption(\"\");\r\n    setTimeRemaining(\"01:00\"); // Reset timeRemaining to 01:00\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {!sessionActive && (\r\n        <button className=\"btn btn-primary mt-3\" onClick={handleStartQuiz}>\r\n          Start Quiz\r\n        </button>\r\n      )}\r\n      {sessionActive && (\r\n        <div className=\"mt-3\">\r\n          <div className=\"mb-3\">\r\n            <p>Time Remaining: {timeRemaining}</p>\r\n          </div>\r\n          <div>\r\n            <h5>{questions[currentQuestion].question}</h5>\r\n            <form>\r\n              {questions[currentQuestion].options.map((option, index) => (\r\n                <div key={index} className=\"form-check\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"option\"\r\n                    id={`option${index}`}\r\n                    value={option}\r\n                    onChange={handleOptionChange}\r\n                    checked={selectedOption === option}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label\"\r\n                    htmlFor={`option${index}`}\r\n                  >\r\n                    {option}\r\n                  </label>\r\n                </div>\r\n              ))}\r\n            </form>\r\n          </div>\r\n          <button\r\n            className=\"btn btn-primary mt-3 me-2\"\r\n            onClick={handleNextQuestion}\r\n            disabled={\r\n              selectedOption === \"\" || currentQuestion === questions.length - 1\r\n            }\r\n          >\r\n            Next\r\n          </button>\r\n          {currentQuestion === questions.length - 1 && (\r\n            <button\r\n              className=\"btn btn-primary mt-3 ms-2\"\r\n              onClick={handleSubmit}\r\n              disabled={selectedOption === \"\"}\r\n            >\r\n              Submit Quiz\r\n            </button>\r\n          )}\r\n          <div className=\"mt-3\">\r\n            <h5>Question Status:</h5>\r\n            <div className=\"list-group\">\r\n              {questions.map((_, index) => (\r\n                <button\r\n                  key={index}\r\n                  className={`list-group-item list-group-item-action ${\r\n                    questionStatus[index] === \"attempted\"\r\n                      ? \"list-group-item-success\"\r\n                      : questionStatus[index] === \"missed\"\r\n                      ? \"list-group-item-warning\"\r\n                      : \"\"\r\n                  }`}\r\n                  onClick={() => handleQuestionClick(index)}\r\n                >\r\n                  Question {index + 1} - {questionStatus[index]}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}